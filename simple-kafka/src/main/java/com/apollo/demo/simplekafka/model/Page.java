/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.apollo.demo.simplekafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Page extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6762030938090908556L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Page\",\"namespace\":\"com.apollo.demo.simplekafka.model\",\"fields\":[{\"name\":\"pageId\",\"type\":\"string\"},{\"name\":\"user\",\"type\":{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"}]}},{\"name\":\"duration\",\"type\":\"long\"},{\"name\":\"pageEventType\",\"type\":{\"type\":\"enum\",\"name\":\"PageEventType\",\"symbols\":[\"AMAZING_USER\",\"NORMAL_USER\",\"NOT_A_KEEPER\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Page> ENCODER =
      new BinaryMessageEncoder<Page>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Page> DECODER =
      new BinaryMessageDecoder<Page>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Page> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Page> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Page> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Page>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Page to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Page from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Page instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Page fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence pageId;
   private com.apollo.demo.simplekafka.model.User user;
   private long duration;
   private com.apollo.demo.simplekafka.model.PageEventType pageEventType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Page() {}

  /**
   * All-args constructor.
   * @param pageId The new value for pageId
   * @param user The new value for user
   * @param duration The new value for duration
   * @param pageEventType The new value for pageEventType
   */
  public Page(java.lang.CharSequence pageId, com.apollo.demo.simplekafka.model.User user, java.lang.Long duration, com.apollo.demo.simplekafka.model.PageEventType pageEventType) {
    this.pageId = pageId;
    this.user = user;
    this.duration = duration;
    this.pageEventType = pageEventType;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pageId;
    case 1: return user;
    case 2: return duration;
    case 3: return pageEventType;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pageId = (java.lang.CharSequence)value$; break;
    case 1: user = (com.apollo.demo.simplekafka.model.User)value$; break;
    case 2: duration = (java.lang.Long)value$; break;
    case 3: pageEventType = (com.apollo.demo.simplekafka.model.PageEventType)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'pageId' field.
   * @return The value of the 'pageId' field.
   */
  public java.lang.CharSequence getPageId() {
    return pageId;
  }


  /**
   * Sets the value of the 'pageId' field.
   * @param value the value to set.
   */
  public void setPageId(java.lang.CharSequence value) {
    this.pageId = value;
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public com.apollo.demo.simplekafka.model.User getUser() {
    return user;
  }


  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(com.apollo.demo.simplekafka.model.User value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'duration' field.
   * @return The value of the 'duration' field.
   */
  public long getDuration() {
    return duration;
  }


  /**
   * Sets the value of the 'duration' field.
   * @param value the value to set.
   */
  public void setDuration(long value) {
    this.duration = value;
  }

  /**
   * Gets the value of the 'pageEventType' field.
   * @return The value of the 'pageEventType' field.
   */
  public com.apollo.demo.simplekafka.model.PageEventType getPageEventType() {
    return pageEventType;
  }


  /**
   * Sets the value of the 'pageEventType' field.
   * @param value the value to set.
   */
  public void setPageEventType(com.apollo.demo.simplekafka.model.PageEventType value) {
    this.pageEventType = value;
  }

  /**
   * Creates a new Page RecordBuilder.
   * @return A new Page RecordBuilder
   */
  public static com.apollo.demo.simplekafka.model.Page.Builder newBuilder() {
    return new com.apollo.demo.simplekafka.model.Page.Builder();
  }

  /**
   * Creates a new Page RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Page RecordBuilder
   */
  public static com.apollo.demo.simplekafka.model.Page.Builder newBuilder(com.apollo.demo.simplekafka.model.Page.Builder other) {
    if (other == null) {
      return new com.apollo.demo.simplekafka.model.Page.Builder();
    } else {
      return new com.apollo.demo.simplekafka.model.Page.Builder(other);
    }
  }

  /**
   * Creates a new Page RecordBuilder by copying an existing Page instance.
   * @param other The existing instance to copy.
   * @return A new Page RecordBuilder
   */
  public static com.apollo.demo.simplekafka.model.Page.Builder newBuilder(com.apollo.demo.simplekafka.model.Page other) {
    if (other == null) {
      return new com.apollo.demo.simplekafka.model.Page.Builder();
    } else {
      return new com.apollo.demo.simplekafka.model.Page.Builder(other);
    }
  }

  /**
   * RecordBuilder for Page instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Page>
    implements org.apache.avro.data.RecordBuilder<Page> {

    private java.lang.CharSequence pageId;
    private com.apollo.demo.simplekafka.model.User user;
    private com.apollo.demo.simplekafka.model.User.Builder userBuilder;
    private long duration;
    private com.apollo.demo.simplekafka.model.PageEventType pageEventType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.apollo.demo.simplekafka.model.Page.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pageId)) {
        this.pageId = data().deepCopy(fields()[0].schema(), other.pageId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.user)) {
        this.user = data().deepCopy(fields()[1].schema(), other.user);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasUserBuilder()) {
        this.userBuilder = com.apollo.demo.simplekafka.model.User.newBuilder(other.getUserBuilder());
      }
      if (isValidValue(fields()[2], other.duration)) {
        this.duration = data().deepCopy(fields()[2].schema(), other.duration);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.pageEventType)) {
        this.pageEventType = data().deepCopy(fields()[3].schema(), other.pageEventType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Page instance
     * @param other The existing instance to copy.
     */
    private Builder(com.apollo.demo.simplekafka.model.Page other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.pageId)) {
        this.pageId = data().deepCopy(fields()[0].schema(), other.pageId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.user)) {
        this.user = data().deepCopy(fields()[1].schema(), other.user);
        fieldSetFlags()[1] = true;
      }
      this.userBuilder = null;
      if (isValidValue(fields()[2], other.duration)) {
        this.duration = data().deepCopy(fields()[2].schema(), other.duration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.pageEventType)) {
        this.pageEventType = data().deepCopy(fields()[3].schema(), other.pageEventType);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'pageId' field.
      * @return The value.
      */
    public java.lang.CharSequence getPageId() {
      return pageId;
    }


    /**
      * Sets the value of the 'pageId' field.
      * @param value The value of 'pageId'.
      * @return This builder.
      */
    public com.apollo.demo.simplekafka.model.Page.Builder setPageId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.pageId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'pageId' field has been set.
      * @return True if the 'pageId' field has been set, false otherwise.
      */
    public boolean hasPageId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'pageId' field.
      * @return This builder.
      */
    public com.apollo.demo.simplekafka.model.Page.Builder clearPageId() {
      pageId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public com.apollo.demo.simplekafka.model.User getUser() {
      return user;
    }


    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public com.apollo.demo.simplekafka.model.Page.Builder setUser(com.apollo.demo.simplekafka.model.User value) {
      validate(fields()[1], value);
      this.userBuilder = null;
      this.user = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'user' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.apollo.demo.simplekafka.model.User.Builder getUserBuilder() {
      if (userBuilder == null) {
        if (hasUser()) {
          setUserBuilder(com.apollo.demo.simplekafka.model.User.newBuilder(user));
        } else {
          setUserBuilder(com.apollo.demo.simplekafka.model.User.newBuilder());
        }
      }
      return userBuilder;
    }

    /**
     * Sets the Builder instance for the 'user' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.apollo.demo.simplekafka.model.Page.Builder setUserBuilder(com.apollo.demo.simplekafka.model.User.Builder value) {
      clearUser();
      userBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'user' field has an active Builder instance
     * @return True if the 'user' field has an active Builder instance
     */
    public boolean hasUserBuilder() {
      return userBuilder != null;
    }

    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public com.apollo.demo.simplekafka.model.Page.Builder clearUser() {
      user = null;
      userBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration' field.
      * @return The value.
      */
    public long getDuration() {
      return duration;
    }


    /**
      * Sets the value of the 'duration' field.
      * @param value The value of 'duration'.
      * @return This builder.
      */
    public com.apollo.demo.simplekafka.model.Page.Builder setDuration(long value) {
      validate(fields()[2], value);
      this.duration = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'duration' field has been set.
      * @return True if the 'duration' field has been set, false otherwise.
      */
    public boolean hasDuration() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'duration' field.
      * @return This builder.
      */
    public com.apollo.demo.simplekafka.model.Page.Builder clearDuration() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'pageEventType' field.
      * @return The value.
      */
    public com.apollo.demo.simplekafka.model.PageEventType getPageEventType() {
      return pageEventType;
    }


    /**
      * Sets the value of the 'pageEventType' field.
      * @param value The value of 'pageEventType'.
      * @return This builder.
      */
    public com.apollo.demo.simplekafka.model.Page.Builder setPageEventType(com.apollo.demo.simplekafka.model.PageEventType value) {
      validate(fields()[3], value);
      this.pageEventType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'pageEventType' field has been set.
      * @return True if the 'pageEventType' field has been set, false otherwise.
      */
    public boolean hasPageEventType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'pageEventType' field.
      * @return This builder.
      */
    public com.apollo.demo.simplekafka.model.Page.Builder clearPageEventType() {
      pageEventType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Page build() {
      try {
        Page record = new Page();
        record.pageId = fieldSetFlags()[0] ? this.pageId : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (userBuilder != null) {
          try {
            record.user = this.userBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("user"));
            throw e;
          }
        } else {
          record.user = fieldSetFlags()[1] ? this.user : (com.apollo.demo.simplekafka.model.User) defaultValue(fields()[1]);
        }
        record.duration = fieldSetFlags()[2] ? this.duration : (java.lang.Long) defaultValue(fields()[2]);
        record.pageEventType = fieldSetFlags()[3] ? this.pageEventType : (com.apollo.demo.simplekafka.model.PageEventType) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Page>
    WRITER$ = (org.apache.avro.io.DatumWriter<Page>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Page>
    READER$ = (org.apache.avro.io.DatumReader<Page>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.pageId);

    this.user.customEncode(out);

    out.writeLong(this.duration);

    out.writeEnum(this.pageEventType.ordinal());

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.pageId = in.readString(this.pageId instanceof Utf8 ? (Utf8)this.pageId : null);

      if (this.user == null) {
        this.user = new com.apollo.demo.simplekafka.model.User();
      }
      this.user.customDecode(in);

      this.duration = in.readLong();

      this.pageEventType = com.apollo.demo.simplekafka.model.PageEventType.values()[in.readEnum()];

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.pageId = in.readString(this.pageId instanceof Utf8 ? (Utf8)this.pageId : null);
          break;

        case 1:
          if (this.user == null) {
            this.user = new com.apollo.demo.simplekafka.model.User();
          }
          this.user.customDecode(in);
          break;

        case 2:
          this.duration = in.readLong();
          break;

        case 3:
          this.pageEventType = com.apollo.demo.simplekafka.model.PageEventType.values()[in.readEnum()];
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










